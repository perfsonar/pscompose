import React, { useState, useEffect } from "react";
import axios from "axios";
import { Formik, Form, Field, useFormik } from "formik";
import * as Yup from "yup";
import { motion as m } from "framer-motion";

const API_URL = "http://localhost:8000";

const App = () => {
	const [formFields, setFormFields] = useState([]);
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState(null);

    useEffect(() => {
		const fetchFormData = async () => {
			try {
				const response = await axios.get(`${API_URL}/pscompose/test/throughput`);
				setFormFields(response.data);
				setLoading(false);
			} catch (err) {
				console.error("Error details:", err);
				setError("Error fetching form data: " + err.message);
				setLoading(false);
			}
		};
		fetchFormData();
	}, []);

    const handleSubmit = async (values, { setSubmitting }) => {
		try {
			const formattedValues = Object.entries(values).map(([name, value]) => ({
				name,
				value,
			}));
			const response = await axios.post(
				`${API_URL}/pscompose/test/throughput`,
				formattedValues
			);
			console.log("Form submitted successfully:", response.data);
			alert("Form submitted successfully!");
		} catch (err) {
			console.error("Error submitting form:", err);
			alert("Error submitting form. Please try again.");
		}
		setSubmitting(false);
	};

	const formik = useFormik({
		initialValues: {
			name: "",
			email: "",
			country: "United Kingdom",
			terms: "",
		},

		validationSchema: Yup.object({
			name: Yup.string()
				.max(20, "Name must be 20 characters or less.")
				.required("Name is required"),
			email: Yup.string().email("Invalid email address").required("Email is required"),
			terms: Yup.array().required("Terms of service must be checked"),
		}),

		onSubmit: (values) => {
			console.log("form submitted");
			console.log(values);
		},
	});

    const initialValues = formFields.reduce(
		(acc, field) => ({
			...acc,
			[field.name]: field.default !== undefined ? field.default : "",
		}),
		{}
	);

    const renderFormFields = () => {
		return formFields.map((field) => (
			<div key={field.name} className="pb-4">
				<label 
                    htmlFor={field.name} 
                    className={`block font-latoBold text-sm pb-2 ${
                        formik.touched.name && formik.errors.name
                            ? "text-red-400"
                            : ""
                    } `}
                >
					{field.display_name}{" "}
					{field.required && "(required)"}
                </label>
                <p className="text-sm font-latoBold text-red-400 "></p>
				<Field
					type={field.type === "integer" ? "number" : "text"}
					id={field.name}
					name={field.name}
					required={field.required}
					placeholder={field.default !== undefined ? `Default: ${field.default}` : ""}
					className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
				/>
			</div>
		));
	};

	return (
		<m.div
			initial={{ opacity: 0 }}
			animate={{ opacity: 1 }}
			exit={{ opacity: 0 }}
			className="absolute w-full"
		>
			<head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</head>

			<main className="items-center flex justify-center">
                <Formik 
                    initialValues={initialValues} 
                    onSubmit={handleSubmit}
                    className="bg-white flex rounded-lg w-1/2 font-latoRegular"
                >
                    {({ isSubmitting }) => (
                        <Form className="space-y-6">
                            <div className="flex-1 text-gray-700  p-20">
                                <div className="mt-6 ">
                                    {renderFormFields()}
                                    <button
                                        type="submit"
                                        disabled={isSubmitting}
                                        className="bg-teal-500 font-latoBold text-sm text-white py-3 mt-6 rounded-lg w-full"
                                    >
                                        {isSubmitting ? "Submitting..." : "Submit"}
                                    </button>
                                </div>
                            </div>
                        </Form>
                    )}
                </Formik>
			</main>
		</m.div>
	);
};

export default App;
